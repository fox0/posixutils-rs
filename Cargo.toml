[workspace]
resolver = "2"

members = [
	"awk",
	"calc",
	"datetime",
	"dev",
	"display",
	"file",
	"fs",
	"ftw",
	"m4",
	"m4/test-manager",
	"gettext-rs",
	"misc",
	"pathnames",
	"plib",
	"process",
	"sccs",
	"screen",
	"sys",
	"text",
	"tree",
	"users",
	"xform",
	"i18n"
]

[workspace.package]
repository = "https://github.com/rustcoreutils/posixutils-rs"
license = "MIT"
edition = "2021"
rust-version = "1.80.0"

[workspace.dependencies]
clap = { version = "4", default-features = false, features = ["std", "derive", "help", "usage", "error-context", "cargo"] }
chrono = { version = "0.4", default-features = false, features = ["clock"] }
libc = "0.2"
regex = "1.10"
gettext-rs = { path = "./gettext-rs" }
errno = "0.3"

[workspace.lints]

[workspace.lints.clippy]
# TODO https://github.com/rustcoreutils/posixutils-rs/pull/310
unnecessary_cast = { level = "allow", priority = 1 }
needless_borrow = { level = "allow", priority = 1 }

# TODO remove this
too_many_arguments = { level = "allow", priority = 1 }
collapsible_else_if = { level = "allow", priority = 1 }
if_same_then_else = { level = "allow", priority = 1 }
ptr_arg = { level = "allow", priority = 1 }
manual_inspect = { level = "allow", priority = 1 }
manual_flatten = { level = "allow", priority = 1 }
explicit_auto_deref = { level = "allow", priority = 1 }
match_like_matches_macro = { level = "allow", priority = 1 }
single_match = { level = "allow", priority = 1 }
result_large_err = { level = "allow", priority = 1 }
let_and_return = { level = "allow", priority = 1 }
needless_borrows_for_generic_args = { level = "allow", priority = 1 }
precedence = { level = "allow", priority = 1 }
redundant_pattern_matching = { level = "allow", priority = 1 }
unnecessary_filter_map = { level = "allow", priority = 1 }
needless_lifetimes = { level = "allow", priority = 1 }
expect_fun_call = { level = "allow", priority = 1 }
doc_lazy_continuation = { level = "allow", priority = 1 }
manual_range_contains = { level = "allow", priority = 1 }
print_literal = { level = "allow", priority = 1 }
collapsible_if = { level = "allow", priority = 1 }
while_let_loop = { level = "allow", priority = 1 }

all = "warn"
